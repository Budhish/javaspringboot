pipeline {
    agent any   //d
    options {
        timestamps() // Add this line to enable timestamps in console output
    }
    parameters {
        string(name: 'IMAGE_TAG', defaultValue: '1.0', description: 'Tag of the Docker image to deploy')
        string(name: 'IMAGE_NAME', defaultValue: 'rs-image', description: 'Name of the Docker image to deploy')
    }
    environment {
        // Define AWS ECR and EKS variables
        AWS_ACCOUNT_ID = '381491906321'
        AWS_REGION = 'us-east-1'
        ECR_REPOSITORY = 'rulestudio-javapp'
        EKS_CLUSTER_NAME = 'rulestudio-eks' // Update with your EKS cluster name
        DEPLOYMENT_NAME = 'rs-app-deployment' // Update with your Kubernetes deployment name
        NAMESPACE = 'rs-app' // Update with your Kubernetes namespace if needed
    }
    stages {
        stage('Update Kubeconfig') {
            steps {
                script {
                    withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-credentials-rs', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        // Update kubeconfig to use the EKS cluster
                        sh """
                        aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}
                        """
                    }
                }
            }
        }

        stage('Update Deployment') {
            steps {
                script {
                    // Define the image to be deployed based on parameters
                    def image = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${params.IMAGE_TAG}"

                    // Update deployment with the new image
                    sh """
                    kubectl set image deployment/${DEPLOYMENT_NAME} ${params.IMAGE_NAME}=${image} --namespace=${NAMESPACE}
                    kubectl rollout status deployment/${DEPLOYMENT_NAME} --namespace=${NAMESPACE}
                    """
                }
            }
        }
    }
    post {
        success {
            echo 'Deployment update to EKS succeeded!'
        }
        failure {
            echo 'Deployment update to EKS failed.'
        }
    }
}
